@model PBL3.Models.ViewModel.ParkingSlotViewModel
@{
    IgnoreBody();
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - PBL3</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/QLNX.css" asp-append-version="true" />
    <title>Document</title>
</head>
<body>
    <form class="vehicle-form">
        <button type="button" class="form-close" style="position:absolute;top:10px;right:10px;font-size:20px;background:none;border:none;cursor:pointer;">×</button>
        <h1 class="form-title">Thông tin xe</h1>
        <div class="form-container">
            <div class="form-group">
                <label class="form-label" for="OGX">Ô giữ xe</label>
                <input type="number" id="OGX" class="form-input" max="10" min="0" />
            </div>
            <div class="form-group">
                <label class="form-label" for="fullName">Họ và tên</label>
                <input type="text" id="fullName" class="form-input" />
            </div>
            <div class="form-group">
                <label class="form-label" for="studentId">Mã số sinh viên</label>
                <input type="text" id="studentId" class="form-input" />
            </div>
            <div class="form-group">
                <label class="form-label" for="licensePlate">Biển số xe</label>
                <input type="text" id="licensePlate" class="form-input" />
            </div>
            <div class="form-group">
                <label class="form-label" for="date">Ngày giữ xe</label>
                <div class="date-input-wrapper">
                    <input type="text" id="date" class="date-input" placeholder="Chọn ngày" readonly />
                    <div class="date-picker-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8 2V5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M16 2V5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M3.5 9.09H20.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M21 8.5V17C21 20 19.5 22 16 22H8C4.5 22 3 20 3 17V8.5C3 5.5 4.5 3.5 8 3.5H16C19.5 3.5 21 5.5 21 8.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label class="form-label" for="latestLeave">Ngày ra gần nhất</label>
                <div class="date-input-wrapper">
                    <input type="text" id="latestLeave" class="date-input" placeholder="Chọn ngày" readonly />
                    <div class="date-picker-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8 2V5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M16 2V5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M3.5 9.09H20.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M21 8.5V17C21 20 19.5 22 16 22H8C4.5 22 3 20 3 17V8.5C3 5.5 4.5 3.5 8 3.5H16C19.5 3.5 21 5.5 21 8.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </div>
                </div>
            </div>
            <button type="submit" class="submit-button">Cập nhật xe</button>
        </div>
    </form>

    <div class="right-container">
        <form class="search-container" method="get" action="@Url.Action("Index", "ParkingSlot")">
            <div class="search-content">
                <div class="search-input-container">
                    <div class="search-input-wrapper">
                        <input type="text" name="searchTerm" value="@Model.SearchTerm" placeholder="Tìm kiếm" class="search-input" />
                    </div>
                </div>
                <select name="searchType" class="filter-dropdown">
                    <option value="mssv" selected="@(Model.SearchType == "mssv")">MSSV</option>
                    <option value="name" selected="@(Model.SearchType == "name")">Họ và tên</option>
                    <option value="license" selected="@(Model.SearchType == "license")">Biển số xe</option>
                    <option value="entry-date" selected="@(Model.SearchType == "entry-date")">Ngày giữ xe</option>
                    <option value="exit-date" selected="@(Model.SearchType == "exit-date")">Ngày ra gần nhất</option>
                    <option value="not-entered" selected="@(Model.SearchType == "not-entered")">Xe chưa vào bãi</option>
                </select>
                <button type="submit" class="search-button">
                    <span class="search-button-text">Tìm kiếm</span>
                </button>
            </div>
        </form>

        <section class="parking-container">
            <h2 class="parking-title">Ô giữ xe</h2>
            <div class="parking-grid">
                @foreach (var slot in Model.ParkingSlots)
                {
                    <div class="parking-row">
                        <article class="parking-space">
                            <div class="space-content">
                                <h3 class="space-title">Ô số @slot.SlotName</h3>
                                <span class="occupancy-badge @(slot.CurrentCount <= 6 ? "occupancy-normal" : slot.CurrentCount <= 9 ? "occupancy-warning" : "occupancy-danger")">@slot.CurrentCount/@slot.MaxCapacity</span>
                            </div>
                        </article>
                    </div>
                }
            </div>
        </section>

        @if (Model.Tickets != null && Model.Tickets.Any())
        {
            <div class="modal show" id="parkingModal">
                <div class="modal-content">
                    <h2 class="modal-title">Kết quả tìm kiếm</h2>
                    <div class="modal-table-container">
                        <form method="post" action="@Url.Action("DeleteTickets", "ParkingSlot")">
                            <table class="modal-table">
                                <thead>
                                    <tr>
                                        <th><input type="checkbox" id="selectAll" /></th>
                                        <th>STT</th>
                                        <th>Họ và tên</th>
                                        <th>Mã số sinh viên</th>
                                        <th>Biển số xe</th>
                                        <th>Ngày giữ xe</th>
                                        <th>Ngày ra gần nhất</th>
                                        <th>Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ticket in Model.Tickets)
                                    {
                                        <tr>
                                            <td><input type="checkbox" name="ticketIds" value="@ticket.ID_Ticket" class="mark-checkbox" /></td>
                                            <td>@ticket.ID_Ticket</td>
                                            <td>@ticket.Student?.HoTen</td>
                                            <td>@ticket.Student?.MSSV</td>
                                            <td>@ticket.BienSoXe</td>
                                            <td>@ticket.NgayDangKy.ToString("dd/MM/yyyy")</td>
                                            <td>@ticket.NgayHetHan.ToString("dd/MM/yyyy")</td>
                                            <td><button type="button" class="edit-button">Edit</button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="modal-buttons">
                                <button type="submit" class="delete-button">Xóa</button>
                                <button type="button" class="modal-close">Đóng</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>

    <script>
        // Function to update occupancy badge
        function updateOccupancyBadge(space, recordCount) {
          const badge = space.querySelector('.occupancy-badge');
          badge.textContent = `${recordCount}/10`;

          // Remove existing color classes
          badge.classList.remove('occupancy-normal', 'occupancy-warning', 'occupancy-danger');

          // Add appropriate color class
          if (recordCount <= 6) {
            badge.classList.add('occupancy-normal');
          } else if (recordCount <= 9) {
            badge.classList.add('occupancy-warning');
          } else {
            badge.classList.add('occupancy-danger');
          }
        }

        // Mapping for number of records per space (updated as requested)
        const spaceRecordCounts = {
          '1': 3,
          '2': 4,
          '3': 7,
          '4': 8,
          '5': 10,
          '6': 10,
          '7': 2,
          '8': 8,
          '9': 1,
          '10': 3
        };

        // Function to get record count for a space
        function getRecordCount(spaceNumber) {
          return spaceRecordCounts[spaceNumber] || 0;
        }

        // Function to generate records for a space
        function generateRecords(spaceNumber) {
          const count = getRecordCount(spaceNumber);
          const records = [];
          for (let i = 0; i < count; i++) {
            records.push({
              name: `Nguyễn Văn ${String.fromCharCode(65 + i)}`,
              id: `2023${spaceNumber}${String(i + 1).padStart(3, '0')}`,
              plate: `51G-${spaceNumber}${String(i + 1).padStart(4, '0')}`,
              entry: `${String(i + 1).padStart(2, '0')}/03/2024`,
              exit: `${String(i + 15).padStart(2, '0')}/03/2024`
            });
          }
          return records;
        }

        // Initialize all occupancy badges
        function initializeOccupancyBadges() {
          document.querySelectorAll('.parking-space').forEach(space => {
            const spaceNumber = space.querySelector('.space-title').textContent.split(' ')[2];
            const recordCount = getRecordCount(spaceNumber);
            updateOccupancyBadge(space, recordCount);
          });
        }

        // Add click event listeners to all parking spaces
        document.querySelectorAll('.parking-space').forEach(space => {
          space.addEventListener('click', function() {
            const spaceNumber = this.querySelector('.space-title').textContent.split(' ')[2];
            document.getElementById('parkingNumber').textContent = spaceNumber;

            // Clear existing table content
            const tableBody = document.getElementById('parkingTableBody');
            tableBody.innerHTML = '';

            // Generate records for the space
            const records = generateRecords(spaceNumber);
            const recordCount = records.length;

            // Add records to table
            records.forEach((record, index) => {
              const row = document.createElement('tr');
              row.innerHTML = `
                <td><input type=\"checkbox\" class=\"mark-checkbox\"></td>
                <td>${index + 1}</td>
                <td>${record.name}</td>
                <td>${record.id}</td>
                <td>${record.plate}</td>
                <td>${record.entry}</td>
                <td>${record.exit}</td>
                <td><button class=\"edit-button\">Edit</button></td>
              `;
              tableBody.appendChild(row);
            });

            // Update occupancy badge
            updateOccupancyBadge(this, recordCount);

            document.getElementById('parkingModal').classList.add('show');

            // Add event listeners to edit buttons (after table is rendered)
            tableBody.querySelectorAll('.edit-button').forEach(btn => {
              btn.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent modal from closing
                document.body.classList.add('show-form');
              });
            });
          });
        });

        // Close modal when clicking the close button
        document.querySelector('.modal-close').addEventListener('click', function() {
          document.getElementById('parkingModal').classList.remove('show');
        });

        // Close modal when clicking outside
        document.getElementById('parkingModal').addEventListener('click', function(e) {
          if (e.target === this) {
            this.classList.remove('show');
          }
        });

        // Close Thông tin xe panel only when its close button is clicked
        document.querySelector('.form-close').addEventListener('click', function() {
          document.body.classList.remove('show-form');
        });

        // Initialize occupancy badges when page loads
        document.addEventListener('DOMContentLoaded', initializeOccupancyBadges);

        // Date picker functionality
        function createDatePicker(inputId) {
          const input = document.getElementById(inputId);
          const wrapper = input.parentElement;

          // Create date picker popup
          const popup = document.createElement('div');
          popup.className = 'date-picker-popup';

          // Create header
          const header = document.createElement('div');
          header.className = 'date-picker-header';

          const monthDisplay = document.createElement('div');
          monthDisplay.className = 'date-picker-month';

          const nav = document.createElement('div');
          nav.className = 'date-picker-nav';

          const prevBtn = document.createElement('button');
          prevBtn.innerHTML = '←';
          prevBtn.type = 'button'; // Prevent form submission

          const nextBtn = document.createElement('button');
          nextBtn.innerHTML = '→';
          nextBtn.type = 'button'; // Prevent form submission

          const closeBtn = document.createElement('button');
          closeBtn.innerHTML = '×';
          closeBtn.className = 'date-picker-close';
          closeBtn.type = 'button'; // Prevent form submission

          nav.appendChild(prevBtn);
          nav.appendChild(nextBtn);
          header.appendChild(monthDisplay);
          header.appendChild(nav);
          header.appendChild(closeBtn);

          // Create grid
          const grid = document.createElement('div');
          grid.className = 'date-picker-grid';

          // Add weekdays
          const weekdays = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
          weekdays.forEach(day => {
            const weekday = document.createElement('div');
            weekday.className = 'date-picker-weekday';
            weekday.textContent = day;
            grid.appendChild(weekday);
          });

          popup.appendChild(header);
          popup.appendChild(grid);
          wrapper.appendChild(popup);

          let currentDate = new Date();
          let selectedDate = null;

          function updateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();

            monthDisplay.textContent = `${month + 1}/${year}`;

            // Clear existing days
            while (grid.children.length > 7) {
              grid.removeChild(grid.lastChild);
            }

            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);

            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDay.getDay(); i++) {
              const empty = document.createElement('div');
              empty.className = 'date-picker-day';
              grid.appendChild(empty);
            }

            // Add days of the month
            for (let day = 1; day <= lastDay.getDate(); day++) {
              const dayElement = document.createElement('div');
              dayElement.className = 'date-picker-day';
              dayElement.textContent = day;

              const date = new Date(year, month, day);

              if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
                dayElement.classList.add('selected');
              }

              if (date.toDateString() === new Date().toDateString()) {
                dayElement.classList.add('today');
              }

              dayElement.addEventListener('click', (e) => {
                e.preventDefault(); // Prevent form submission
                selectedDate = date;
                input.value = `${day.toString().padStart(2, '0')}/${(month + 1).toString().padStart(2, '0')}/${year}`;
                updateCalendar();
              });

              grid.appendChild(dayElement);
            }
          }

          // Event listeners
          prevBtn.addEventListener('click', (e) => {
            e.preventDefault();
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendar();
          });

          nextBtn.addEventListener('click', (e) => {
            e.preventDefault();
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendar();
          });

          closeBtn.addEventListener('click', (e) => {
            e.preventDefault();
            popup.classList.remove('show');
          });

          input.addEventListener('click', (e) => {
            e.preventDefault();
            popup.classList.toggle('show');
            updateCalendar();
          });

          // Close popup when clicking outside
          document.addEventListener('click', (e) => {
            // Only handle clicks outside the date picker
            if (!wrapper.contains(e.target) && !e.target.closest('.date-picker-popup')) {
              popup.classList.remove('show');
            }
          });

          updateCalendar();
        }

        // Initialize date pickers
        createDatePicker('date');
        createDatePicker('latestLeave');

        // Add select all functionality
        document.getElementById('selectAll')?.addEventListener('change', function() {
          const checkboxes = document.getElementsByName('ticketIds');
          checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
          });
        });

        // Update the search form submission
        document.querySelector('.search-container').addEventListener('submit', function(e) {
          const searchTerm = this.querySelector('input[name="searchTerm"]').value;
          const searchType = this.querySelector('select[name="searchType"]').value;

          if (!searchTerm && searchType !== 'not-entered') {
            e.preventDefault();
            alert('Vui lòng nhập từ khóa tìm kiếm');
          }
        });
    </script>
</body>
</html>