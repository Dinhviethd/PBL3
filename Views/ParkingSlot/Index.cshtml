@model PBL3.Models.ViewModel.ParkingSlotViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> UserManager

@{
    IgnoreBody();
    var user = await UserManager.GetUserAsync(User);
    var isStaff = await UserManager.IsInRoleAsync(user, "Staff");
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - PBL3</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/QLNX.css" asp-append-version="true" />
    <title>Document</title>
    <style>
        .add-button {
            padding: 8px 24px;
            background-color: #2563eb;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: background-color 0.2s ease;
        }

        .add-button:hover {
            background-color: #1d4ed8;
        }

        .confirm-button {
            padding: 8px 24px;
            background-color: #22c55e;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: background-color 0.2s ease;
        }

        .confirm-button:hover {
            background-color: #16a34a;
        }

        #assignParkingModal .modal-content {
            max-width: 400px;
            margin: 100px auto;
        }

        #assignParkingModal .form-group {
            margin-bottom: 20px;
        }

        #assignParkingModal label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        #assignParkingModal select {
            width: 100%;
            padding: 8px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <form class="vehicle-form">
        <button type="button" class="form-close" style="position:absolute;top:10px;right:10px;font-size:20px;background:none;border:none;cursor:pointer;">×</button>
        <h1 class="form-title">Thông tin xe</h1>
        <div class="form-container">
            <div class="form-group">
                <label class="form-label" for="OGX">Ô giữ xe</label>
                <input type="number" id="OGX" class="form-input" max="10" min="0" readonly />
            </div>
            <div class="form-group">
                <label class="form-label" for="fullName">Họ và tên</label>
                <input type="text" id="fullName" class="form-input" />
            </div>
            <div class="form-group">
                <label class="form-label" for="studentId">Mã số sinh viên</label>
                <input type="text" id="studentId" class="form-input" />
            </div>
            <div class="form-group">
                <label class="form-label" for="licensePlate">Biển số xe</label>
                <input type="text" id="licensePlate" class="form-input" />
            </div>
            <div class="form-group">
                <label class="form-label" for="date">Ngày giữ xe</label>
                <div class="date-input-wrapper">
                    <input type="text" id="date" class="date-input" placeholder="Chọn ngày" readonly />
                    <div class="date-picker-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8 2V5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M16 2V5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M3.5 9.09H20.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M21 8.5V17C21 20 19.5 22 16 22H8C4.5 22 3 20 3 17V8.5C3 5.5 4.5 3.5 8 3.5H16C19.5 3.5 21 5.5 21 8.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label class="form-label" for="latestLeave">Ngày ra gần nhất</label>
                <div class="date-input-wrapper">
                    <input type="text" id="latestLeave" class="date-input" placeholder="Chọn ngày" readonly />
                    <div class="date-picker-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8 2V5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M16 2V5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M3.5 9.09H20.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M21 8.5V17C21 20 19.5 22 16 22H8C4.5 22 3 20 3 17V8.5C3 5.5 4.5 3.5 8 3.5H16C19.5 3.5 21 5.5 21 8.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </div>
                </div>
            </div>
            <button type="submit" class="submit-button">Cập nhật xe</button>
        </div>
    </form>

    <div class="right-container">
        <form class="search-container" method="get" action="@Url.Action("Index", "ParkingSlot")">
            <div class="search-content">
                <div class="search-input-container">
                    <div class="search-input-wrapper">
                        <input type="text" name="searchTerm" value="@Model.SearchTerm" placeholder="Tìm kiếm" class="search-input" />
                    </div>
                </div>
                <select name="searchType" class="filter-dropdown">
                    <option value="mssv" selected="@(Model.SearchType == "mssv")">MSSV</option>
                    <option value="name" selected="@(Model.SearchType == "name")">Họ và tên</option>
                    <option value="license" selected="@(Model.SearchType == "license")">Biển số xe</option>
                    <option value="entry-date" selected="@(Model.SearchType == "entry-date")">Ngày giữ xe</option>
                    <option value="exit-date" selected="@(Model.SearchType == "exit-date")">Ngày ra gần nhất</option>
                    <option value="not-entered" selected="@(Model.SearchType == "not-entered")">Xe chưa vào bãi</option>
                </select>
                <button type="submit" class="search-button">
                    <span class="search-button-text">Tìm kiếm</span>
                </button>
            </div>
        </form>

        <section class="parking-container">
            <h2 class="parking-title">Ô giữ xe</h2>
            <div class="parking-grid">
                @foreach (var slot in Model.ParkingSlots)
                {
                    <div class="parking-row">
                        <article class="parking-space">
                            <div class="space-content" data-slot-id="@slot.ParkingSlotId">
                                <h3 class="space-title">Ô số @slot.SlotName</h3>
                                <span class="occupancy-badge @(slot.CurrentCount <= 6 ? "occupancy-normal" : slot.CurrentCount <= 9 ? "occupancy-warning" : "occupancy-danger")">@slot.CurrentCount/@slot.MaxCapacity</span>
                            </div>
                        </article>
                    </div>
                }
            </div>
        </section>

        @if (Model.Tickets != null && Model.Tickets.Any())
        {
            <div class="modal" id="parkingModal">
                <div class="modal-content">
                    <h2 class="modal-title">Kết quả tìm kiếm</h2>
                    <div class="modal-table-container">
                        <form method="post" action="@Url.Action("DeleteTickets", "ParkingSlot")">
                            <table class="modal-table">
                                <thead>
                                    <tr>
                                        @if (isStaff)
                                        {
                                            <th><input type="checkbox" id="selectAll" /></th>
                                        }
                                        <th>STT</th>
                                        <th>Họ và tên</th>
                                        <th>Mã số sinh viên</th>
                                        <th>Biển số xe</th>
                                        <th>Ngày giữ xe</th>
                                        <th>Ngày ra gần nhất</th>
                                        @if (isStaff)
                                        {
                                            <th>Thao tác</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @{var index = 1;}
                                    @foreach (var ticket in Model.Tickets)
                                    {
                                        <tr>
                                            @if (isStaff)
                                            {
                                                <td><input type="checkbox" name="ticketIds" value="@ticket.ID_Ticket" class="mark-checkbox" /></td>
                                            }
                                            <td>@(index++)</td>
                                            <td>@ticket.Student?.HoTen</td>
                                            <td>@ticket.Student?.MSSV</td>
                                            <td>@ticket.BienSoXe</td>
                                            <td>@ticket.NgayDangKy.ToString("dd/MM/yyyy")</td>
                                            <td>@ticket.NgayHetHan.ToString("dd/MM/yyyy")</td>
                                            @if (isStaff)
                                            {
                                                <td><button type="button" class="edit-button" onclick="showEditForm('@ticket.ID_Ticket', '@ticket.Student?.HoTen', '@ticket.Student?.MSSV', '@ticket.BienSoXe', '@ticket.NgayDangKy.ToString("dd/MM/yyyy")', '@ticket.NgayHetHan.ToString("dd/MM/yyyy")', null, '')">Edit</button></td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="modal-buttons">
                                @if (isStaff)
                                {
                                    <button type="submit" class="delete-button">Xóa</button>
                                    @if (Model.SearchType == "not-entered")
                                    {
                                        <button type="button" class="add-button" id="addToParkingBtn">Thêm</button>
                                    }
                                }
                                <button type="button" class="modal-close">Đóng</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        }

        <div class="modal" id="assignParkingModal">
            <div class="modal-content">
                <h2 class="modal-title">Chọn ô giữ xe</h2>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="parkingSlotSelect">Ô giữ xe:</label>
                        <select id="parkingSlotSelect" class="form-control">
                            @foreach (var slot in Model.ParkingSlots)
                            {
                                <option value="@slot.ParkingSlotId" 
                                        data-current="@slot.CurrentCount" 
                                        data-max="@slot.MaxCapacity">
                                    Ô số @slot.SlotName (@slot.CurrentCount/@slot.MaxCapacity)
                                </option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-buttons">
                    <button type="button" class="confirm-button" id="confirmAssignBtn">Xác nhận</button>
                    <button type="button" class="modal-close">Hủy</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Function to update occupancy badge
        function updateOccupancyBadge(space, recordCount, maxCapacity) {
            const badge = space.querySelector('.occupancy-badge');
            badge.textContent = `${recordCount}/${maxCapacity}`;

            // Remove existing color classes
            badge.classList.remove('occupancy-normal', 'occupancy-warning', 'occupancy-danger');

            // Add appropriate color class based on percentage occupancy
            const occupancyPercentage = (recordCount / maxCapacity) * 100;
            if (occupancyPercentage <= 60) {
                badge.classList.add('occupancy-normal');
            } else if (occupancyPercentage <= 90) {
                badge.classList.add('occupancy-warning');
            } else {
                badge.classList.add('occupancy-danger');
            }
        }

        // Function to create a new parking modal
        function createParkingModal() {
            const div = document.createElement('div');
            div.id = 'parkingModal';
            div.className = 'modal';
            const isStaff = @Json.Serialize(isStaff);

            let tableHeaders = `
                <th>STT</th>
                <th>Họ và tên</th>
                <th>Mã số sinh viên</th>
                <th>Biển số xe</th>
                <th>Ngày giữ xe</th>
                <th>Ngày ra gần nhất</th>`;

            if (isStaff) {
                tableHeaders = `
                    <th><input type="checkbox" id="selectAll" /></th>
                    ${tableHeaders}
                    <th>Thao tác</th>`;
            }

            div.innerHTML = `
                <div class="modal-content">
                    <h2 class="modal-title">Danh sách xe</h2>
                    <div class="modal-table-container">
                        <form method="post" action="@Url.Action("DeleteTickets", "ParkingSlot")">
                            <table class="modal-table">
                                <thead>
                                    <tr>${tableHeaders}</tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                            <div class="modal-buttons">
                                ${isStaff ? 
                                    `<button type="submit" class="delete-button">Xóa</button>
                                    ${@Json.Serialize(Model.SearchType == "not-entered") ? '<button type="button" class="add-button" id="addToParkingBtn">Thêm</button>' : ''}`
                                    : ''}
                                <button type="button" class="modal-close">Đóng</button>
                            </div>
                        </form>
                    </div>
                </div>`;
            return div;
        }

        // Initialize occupancy badges and click handlers when page loads
        document.addEventListener('DOMContentLoaded', function() {
            const isStaff = @Json.Serialize(isStaff);
            
            // Create a reusable modal element
            const modal = createParkingModal();
            document.querySelector('.right-container').appendChild(modal);

            // Add selectAll functionality only for staff
            if (isStaff) {
                const selectAllCheckbox = document.getElementById('selectAll');
                if (selectAllCheckbox) {
                    selectAllCheckbox.addEventListener('change', function() {
                        const checkboxes = document.querySelectorAll('.mark-checkbox');
                        checkboxes.forEach(checkbox => {
                            checkbox.checked = this.checked;
                        });
                    });
                }
            }

            // Add event listeners to all modal close buttons
            document.querySelectorAll('.modal-close').forEach(button => {
                button.addEventListener('click', function() {
                    // Find the closest parent modal and hide it
                    const parentModal = this.closest('.modal');
                    if (parentModal) {
                        parentModal.classList.remove('show');
                    }
                });
            });

            // Close modal when clicking outside
            document.querySelectorAll('.modal').forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        this.classList.remove('show');
                    }
                });
            });

            document.querySelectorAll('.parking-space').forEach(space => {
                // Initialize occupancy badge
                const badge = space.querySelector('.occupancy-badge');
                const [current, max] = badge.textContent.split('/').map(num => parseInt(num));
                updateOccupancyBadge(space, current, max);

                // Add click handler
                space.addEventListener('click', async function() {
                    const slotId = this.querySelector('.space-content').dataset.slotId;
                    const slotName = this.querySelector('.space-title').textContent.split(' ')[2];
                    
                    try {
                        const response = await fetch(`/ParkingSlot/GetTicketsBySlot?slotId=${slotId}`);
                        const result = await response.json();
                        
                        if (result.success) {
                            const parkingModal = document.getElementById('parkingModal');
                            const modalTitle = parkingModal.querySelector('.modal-title');
                            const tableBody = parkingModal.querySelector('tbody');
                            
                            modalTitle.textContent = `Danh sách xe trong Ô số ${slotName}`;
                            tableBody.innerHTML = '';
                            
                            result.data.forEach((ticket, index) => {
                                const row = document.createElement('tr');
                                let rowHtml = '';
                                
                                if (isStaff) {
                                    rowHtml += `<td><input type="checkbox" name="ticketIds" value="${ticket.id}" class="mark-checkbox" /></td>`;
                                }
                                
                                rowHtml += `
                                    <td>${index + 1}</td>
                                    <td>${ticket.studentName || ''}</td>
                                    <td>${ticket.studentId || ''}</td>
                                    <td>${ticket.licensePlate}</td>
                                    <td>${ticket.entryDate}</td>
                                    <td>${ticket.exitDate}</td>`;
                                
                                if (isStaff) {
                                    rowHtml += `<td><button type="button" class="edit-button" onclick="showEditForm('${ticket.id}', '${ticket.studentName}', '${ticket.studentId}', '${ticket.licensePlate}', '${ticket.entryDate}', '${ticket.exitDate}', ${slotId}, '${slotName}')">Edit</button></td>`;
                                }
                                
                                row.innerHTML = rowHtml;
                                tableBody.appendChild(row);
                            });

                            // Add select all functionality only for staff users
                            if (isStaff) {
                                const selectAll = parkingModal.querySelector('#selectAll');
                                if (selectAll) {
                                    selectAll.checked = false;
                                    selectAll.addEventListener('change', function() {
                                        const checkboxes = parkingModal.querySelectorAll('.mark-checkbox');
                                        checkboxes.forEach(checkbox => {
                                            checkbox.checked = this.checked;
                                        });
                                    });
                                }
                            }
                            
                            parkingModal.classList.add('show');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Có lỗi xảy ra khi tải danh sách vé');
                    }
                });
            });
        });

        // Function to show the edit form
        function showEditForm(ticketId, studentName, studentId, licensePlate, entryDate, exitDate, slotId, slotName) {
            // Fill the form with ticket data
            document.getElementById('OGX').value = slotId;
            document.getElementById('fullName').value = studentName;
            document.getElementById('studentId').value = studentId;
            document.getElementById('licensePlate').value = licensePlate;
            document.getElementById('date').value = entryDate;
            document.getElementById('latestLeave').value = exitDate;
            
            // Show the form
            document.body.classList.add('show-form');

            // Store the ticket ID
            document.querySelector('.vehicle-form').dataset.ticketId = ticketId;
        }

        // Form submission handler
        document.querySelector('.vehicle-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const ticketData = {
                ticketId: parseInt(this.dataset.ticketId),
                studentName: document.getElementById('fullName').value,
                studentId: document.getElementById('studentId').value,
                licensePlate: document.getElementById('licensePlate').value,
                entryDate: document.getElementById('date').value,
                exitDate: document.getElementById('latestLeave').value
            };

            try {
                const response = await fetch('/ParkingSlot/UpdateTicket', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(ticketData)
                });

                const result = await response.json();
                if (result.success) {
                    alert('Cập nhật thành công');
                    document.body.classList.remove('show-form');
                    
                    // Get the slot ID and handle refresh appropriately
                    const slotId = document.getElementById('OGX').value;
                    if (slotId && slotId !== 'null') {
                        const parkingSpace = document.querySelector(`[data-slot-id="${slotId}"]`)?.closest('.parking-space');
                        if (parkingSpace) {
                            parkingSpace.click();
                        }
                    } else {
                        window.location.reload();
                    }
                } else {
                    alert(result.message || 'Có lỗi xảy ra khi cập nhật');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi cập nhật');
            }
        });

        // Close Thông tin xe panel only when its close button is clicked
        document.querySelector('.form-close')?.addEventListener('click', function() {
            document.body.classList.remove('show-form');
        });

        // Date picker functionality
        function createDatePicker(inputId) {
          const input = document.getElementById(inputId);
          const wrapper = input.parentElement;

          // Create date picker popup
          const popup = document.createElement('div');
          popup.className = 'date-picker-popup';

          // Create header
          const header = document.createElement('div');
          header.className = 'date-picker-header';

          const monthDisplay = document.createElement('div');
          monthDisplay.className = 'date-picker-month';

          const nav = document.createElement('div');
          nav.className = 'date-picker-nav';

          const prevBtn = document.createElement('button');
          prevBtn.innerHTML = '←';
          prevBtn.type = 'button'; // Prevent form submission

          const nextBtn = document.createElement('button');
          nextBtn.innerHTML = '→';
          nextBtn.type = 'button'; // Prevent form submission

          const closeBtn = document.createElement('button');
          closeBtn.innerHTML = '×';
          closeBtn.className = 'date-picker-close';
          closeBtn.type = 'button'; // Prevent form submission

          nav.appendChild(prevBtn);
          nav.appendChild(nextBtn);
          header.appendChild(monthDisplay);
          header.appendChild(nav);
          header.appendChild(closeBtn);

          // Create grid
          const grid = document.createElement('div');
          grid.className = 'date-picker-grid';

          // Add weekdays
          const weekdays = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
          weekdays.forEach(day => {
            const weekday = document.createElement('div');
            weekday.className = 'date-picker-weekday';
            weekday.textContent = day;
            grid.appendChild(weekday);
          });

          popup.appendChild(header);
          popup.appendChild(grid);
          wrapper.appendChild(popup);

          let currentDate = new Date();
          let selectedDate = null;

          function updateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();

            monthDisplay.textContent = `${month + 1}/${year}`;

            // Clear existing days
            while (grid.children.length > 7) {
              grid.removeChild(grid.lastChild);
            }

            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);

            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDay.getDay(); i++) {
              const empty = document.createElement('div');
              empty.className = 'date-picker-day';
              grid.appendChild(empty);
            }

            // Add days of the month
            for (let day = 1; day <= lastDay.getDate(); day++) {
              const dayElement = document.createElement('div');
              dayElement.className = 'date-picker-day';
              dayElement.textContent = day;

              const date = new Date(year, month, day);

              if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
                dayElement.classList.add('selected');
              }

              if (date.toDateString() === new Date().toDateString()) {
                dayElement.classList.add('today');
              }

              dayElement.addEventListener('click', (e) => {
                e.preventDefault(); // Prevent form submission
                selectedDate = date;
                input.value = `${day.toString().padStart(2, '0')}/${(month + 1).toString().padStart(2, '0')}/${year}`;
                updateCalendar();
              });

              grid.appendChild(dayElement);
            }
          }

          // Event listeners
          prevBtn.addEventListener('click', (e) => {
            e.preventDefault();
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendar();
          });

          nextBtn.addEventListener('click', (e) => {
            e.preventDefault();
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendar();
          });

          closeBtn.addEventListener('click', (e) => {
            e.preventDefault();
            popup.classList.remove('show');
          });

          input.addEventListener('click', (e) => {
            e.preventDefault();
            popup.classList.toggle('show');
            updateCalendar();
          });

          // Close popup when clicking outside
          document.addEventListener('click', (e) => {
            // Only handle clicks outside the date picker
            if (!wrapper.contains(e.target) && !e.target.closest('.date-picker-popup')) {
              popup.classList.remove('show');
            }
          });

          updateCalendar();
        }

        // Initialize date pickers
        createDatePicker('date');
        createDatePicker('latestLeave');

        // Add select all functionality
        document.getElementById('selectAll')?.addEventListener('change', function() {
          const checkboxes = document.getElementsByName('ticketIds');
          checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
          });
        });

        // Show search results modal on page load if there are search results
        document.addEventListener('DOMContentLoaded', function() {
            const searchTerm = document.querySelector('input[name="searchTerm"]').value;
            const searchType = document.querySelector('select[name="searchType"]').value;
            
            // If we have a search term or it's "not-entered" search type, show the modal
            if (searchTerm || searchType === 'not-entered') {
                const modal = document.getElementById('parkingModal');
                if (modal) {
                    modal.classList.add('show');
                }
            }
        });

        // Update the search form submission
        document.querySelector('.search-container').addEventListener('submit', function(e) {
            const searchTerm = this.querySelector('input[name="searchTerm"]').value;
            const searchType = this.querySelector('select[name="searchType"]').value;

            if (searchType === 'not-entered') {
                return true; // Allow submission without search term for "not-entered"
            }

            if (!searchTerm) {
                e.preventDefault();
                alert('Vui lòng nhập từ khóa tìm kiếm');
                return false;
            }
            return true;
        });

        // Add button click handler
        document.getElementById('addToParkingBtn').addEventListener('click', function() {
            const selectedTickets = document.querySelectorAll('input[name="ticketIds"]:checked');
            if (selectedTickets.length === 0) {
                alert('Vui lòng chọn ít nhất một vé');
                return;
            }
            document.getElementById('assignParkingModal').classList.add('show');
        });

        // Confirm assignment handler
        document.getElementById('confirmAssignBtn').addEventListener('click', function() {
            const selectedTickets = Array.from(document.querySelectorAll('input[name="ticketIds"]:checked'))
                .map(checkbox => checkbox.value);
            const selectedSlot = document.getElementById('parkingSlotSelect');
            const option = selectedSlot.options[selectedSlot.selectedIndex];
            const currentCount = parseInt(option.dataset.current);
            const maxCapacity = parseInt(option.dataset.max);
            
            if (selectedTickets.length + currentCount > maxCapacity) {
                alert('Số lượng xe vượt quá sức chứa của ô giữ xe');
                return;
            }

            // Send request to assign tickets
            fetch('/ParkingSlot/AssignTickets', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ticketIds: selectedTickets,
                    parkingSlotId: selectedSlot.value
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message || 'Có lỗi xảy ra');
                }
                
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra');
            });
        });

        // Close assign parking modal
        document.querySelector('#assignParkingModal .modal-close').addEventListener('click', function() {
            document.getElementById('assignParkingModal').classList.remove('show');
        });
    </script>
</body>
</html>